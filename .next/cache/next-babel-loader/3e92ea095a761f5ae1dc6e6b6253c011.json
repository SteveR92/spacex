{"ast":null,"code":"var _jsxFileName = \"/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/past_launches.js\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Past_Launch from \"../components/past_launches/Past_Launch.js\";\nimport withApollo, { clientFn } from \"../libs/withApollo\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      details\n    }\n  }\n`;\n\nconst Past_Launches = () => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(Query, {\n    query: LAUNCHES_QUERY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n    console.log(data.launches.mission_name);\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, \"Test\"), data.launches.map(launch => {\n      return __jsx(Past_Launch, {\n        key: launch.flight_number,\n        launch: launch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 19\n        }\n      });\n    }));\n  }));\n};\n\nexport const getServerSideProps = async () => {\n  const apolloClient = clientFn(); // apolloClient.* https://www.apollographql.com/docs/react/api/apollo-client/#apolloclient-functions\n  // You do not use hooks like useQuery, useMutation in here\n\n  return {\n    props: {\n      apollo: apolloClient,\n      apolloState: {\n        data: apolloClient.cache.extract()\n      }\n    }\n  };\n};\nexport default withApollo(Past_Launches);","map":{"version":3,"sources":["/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/past_launches.js"],"names":["React","Component","Fragment","gql","Query","ApolloClient","ApolloProvider","Past_Launch","withApollo","clientFn","client","uri","LAUNCHES_QUERY","Past_Launches","loading","error","data","console","log","launches","mission_name","map","launch","flight_number","getServerSideProps","apolloClient","props","apollo","apolloState","cache","extract"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,WAAP,MAAwB,4CAAxB;AACA,OAAOC,UAAP,IAAqBC,QAArB,QAAqC,oBAArC;AAEA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,MAAMC,cAAc,GAAGT,GAAI;;;;;;;;;;;CAA3B;;AAaA,MAAMU,aAAa,GAAG,MAAM;AAC1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAED,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC7B,QAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAL,CAAcC,YAA1B;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGGJ,IAAI,CAACG,QAAL,CAAcE,GAAd,CAAmBC,MAAD,IAAY;AAC7B,aACE,MAAC,WAAD;AAAa,QAAA,GAAG,EAAEA,MAAM,CAACC,aAAzB;AAAwC,QAAA,MAAM,EAAED,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJA,CAHH,CADF;AAWD,GAhBH,CADF,CADF;AAsBD,CAvBD;;AAyBA,OAAO,MAAME,kBAAkB,GAAG,YAAY;AAC5C,QAAMC,YAAY,GAAGhB,QAAQ,EAA7B,CAD4C,CAE5C;AACA;;AACA,SAAO;AACLiB,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAEF,YADH;AAELG,MAAAA,WAAW,EAAE;AACXZ,QAAAA,IAAI,EAAES,YAAY,CAACI,KAAb,CAAmBC,OAAnB;AADK;AAFR;AADF,GAAP;AAQD,CAZM;AAcP,eAAetB,UAAU,CAACK,aAAD,CAAzB","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Past_Launch from \"../components/past_launches/Past_Launch.js\";\nimport withApollo, { clientFn } from \"../libs/withApollo\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n});\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      details\n    }\n  }\n`;\n\nconst Past_Launches = () => {\n  return (\n    <div>\n      <Query query={LAUNCHES_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n          console.log(data.launches.mission_name);\n          return (\n            <div>\n              <h2>Test</h2>\n\n              {data.launches.map((launch) => {\n                return (\n                  <Past_Launch key={launch.flight_number} launch={launch} />\n                );\n              })}\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const apolloClient = clientFn();\n  // apolloClient.* https://www.apollographql.com/docs/react/api/apollo-client/#apolloclient-functions\n  // You do not use hooks like useQuery, useMutation in here\n  return {\n    props: {\n      apollo: apolloClient,\n      apolloState: {\n        data: apolloClient.cache.extract(),\n      },\n    },\n  };\n};\n\nexport default withApollo(Past_Launches);\n"]},"metadata":{},"sourceType":"module"}