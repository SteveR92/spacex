{"ast":null,"code":"var _jsxFileName = \"/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/launches/[flight_number].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      details\n    }\n  }\n`;\nexport default (({\n  flightNumber\n}) => {\n  console.log(flightNumber);\n  flight_number = parseInt(flightNumber);\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(Query, {\n    query: LAUNCHES_QUERY,\n    variables: flightNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n    const {\n      mission_name,\n      flight_number,\n      launch_year,\n      launch_success,\n      details\n    } = data.launch;\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 18\n      }\n    }, \"Flight Number: \", flight_number);\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Flight\")));\n});\nexport const getServerSideProps = async req => {\n  const res = req.params.flight_number;\n  return {\n    props: {\n      flightNumber: res\n    }\n  };\n};","map":{"version":3,"sources":["/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/launches/[flight_number].js"],"names":["gql","Query","ApolloClient","ApolloProvider","client","uri","LAUNCHES_QUERY","flightNumber","console","log","flight_number","parseInt","loading","error","data","mission_name","launch_year","launch_success","details","launch","getServerSideProps","req","res","params","props"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,MAAMC,cAAc,GAAGN,GAAI;;;;;;;;;;;CAA3B;AAaA,gBAAe,CAAC;AAAEO,EAAAA;AAAF,CAAD,KAAsB;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAG,EAAAA,aAAa,GAAGC,QAAQ,CAACJ,YAAD,CAAxB;AACA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,cAAd;AAA8B,IAAA,SAAS,EAAEC,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC7B,QAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAWL,OAAO,CAACC,GAAR,CAAYI,KAAZ;AAEX,UAAM;AACJE,MAAAA,YADI;AAEJL,MAAAA,aAFI;AAGJM,MAAAA,WAHI;AAIJC,MAAAA,cAJI;AAKJC,MAAAA;AALI,QAMFJ,IAAI,CAACK,MANT;AAOA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqBT,aAArB,CAAP;AACD,GAbH,CADF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAhBF,CADF;AAsBD,CAzBD;AA2BA,OAAO,MAAMU,kBAAkB,GAAG,MAAOC,GAAP,IAAe;AAC/C,QAAMC,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAWb,aAAvB;AACA,SAAO;AAAEc,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,YAAY,EAAEe;AAAhB;AAAT,GAAP;AACD,CAHM","sourcesContent":["import gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n});\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      details\n    }\n  }\n`;\n\nexport default ({ flightNumber }) => {\n  console.log(flightNumber);\n  flight_number = parseInt(flightNumber);\n  return (\n    <ApolloProvider client={client}>\n      <Query query={LAUNCHES_QUERY} variables={flightNumber}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n\n          const {\n            mission_name,\n            flight_number,\n            launch_year,\n            launch_success,\n            details,\n          } = data.launch;\n          return <div>Flight Number: {flight_number}</div>;\n        }}\n      </Query>\n      <div>\n        <h2>Flight</h2>\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport const getServerSideProps = async (req) => {\n  const res = req.params.flight_number;\n  return { props: { flightNumber: res } };\n};\n"]},"metadata":{},"sourceType":"module"}