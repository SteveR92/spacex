{"ast":null,"code":"var _jsxFileName = \"/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { withApollo } from \"../libs/apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_LAUNCHES } from \"../gql/getLaunches\";\n\nconst IndexPage = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_LAUNCHES);\n  if (error) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (loading) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Setting up Apollo GraphQL in Next.js with Server Side Rendering\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, data.launches.results.map(data => __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, data.mission_name)))));\n};\n\nexport default withApollo({\n  ssr: true\n})(IndexPage);","map":{"version":3,"sources":["/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/index.js"],"names":["React","withApollo","useQuery","ALL_LAUNCHES","IndexPage","loading","error","data","launches","results","map","mission_name","ssr"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AACA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACC,YAAD,CAAzC;AACA,MAAIG,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,IAAI,CAACC,QAAL,CAAcC,OAAd,CAAsBC,GAAtB,CAA2BH,IAAD,IACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACI,YAAV,CADF,CADD,CADH,CAFF,CADF;AAYD,CAhBD;;AAkBA,eAAeV,UAAU,CAAC;AAAEW,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BR,SAA1B,CAAf","sourcesContent":["import React from \"react\";\nimport { withApollo } from \"../libs/apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_LAUNCHES } from \"../gql/getLaunches\";\nconst IndexPage = () => {\n  const { loading, error, data } = useQuery(ALL_LAUNCHES);\n  if (error) return <h1>ERROR</h1>;\n  if (loading) return <h1>Loading...</h1>;\n  return (\n    <>\n      <h3>Setting up Apollo GraphQL in Next.js with Server Side Rendering</h3>\n      <div>\n        {data.launches.results.map((data) => (\n          <ul>\n            <li>{data.mission_name}</li>\n          </ul>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default withApollo({ ssr: true })(IndexPage);\n"]},"metadata":{},"sourceType":"module"}