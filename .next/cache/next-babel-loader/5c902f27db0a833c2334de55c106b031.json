{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/launches/[flight_number].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query LaunchQuery($flight_number: Int!) {\\n    launch(flight_number: $flight_number) {\\n      flight_number\\n      mission_name\\n      launch_year\\n      launch_success\\n      launch_date_local\\n      details\\n      rocket {\\n        rocket_id\\n        rocket_name\\n        rocket_type\\n        second_stage {\\n          payloads {\\n            nationality\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nvar client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\nvar LAUNCH_QUERY = gql(_templateObject());\nexport var __N_SSP = true;\nexport default (function (_ref) {\n  var flightNumber = _ref.flightNumber;\n  var flight_number = parseInt(flightNumber);\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Query, {\n    query: LAUNCH_QUERY,\n    variables: {\n      flight_number: flight_number\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var loading = _ref2.loading,\n        error = _ref2.error,\n        data = _ref2.data;\n    console.log({\n      data: data\n    });\n    if (loading) return __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n\n    var _data$launch = data.launch,\n        mission_name = _data$launch.mission_name,\n        flight_number = _data$launch.flight_number,\n        launch_year = _data$launch.launch_year,\n        launch_success = _data$launch.launch_success,\n        details = _data$launch.details,\n        _data$launch$rocket = _data$launch.rocket,\n        rocket_id = _data$launch$rocket.rocket_id,\n        rocket_name = _data$launch$rocket.rocket_name,\n        rocket_type = _data$launch$rocket.rocket_type,\n        _data$launch$rocket$s = _slicedToArray(_data$launch$rocket.second_stage.payloads, 1),\n        nationality = _data$launch$rocket$s[0].nationality;\n\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, \"Flight Number: \", flight_number, __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    }), \"Mission Name: \", mission_name, __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }), \"nationality: \", nationality, __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }), \"rocket: \", rocket_name);\n  }));\n});","map":{"version":3,"sources":["/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/launches/[flight_number].js"],"names":["gql","Query","ApolloClient","ApolloProvider","client","uri","LAUNCH_QUERY","flightNumber","flight_number","parseInt","loading","error","data","console","log","launch","mission_name","launch_year","launch_success","details","rocket","rocket_id","rocket_name","rocket_type","second_stage","payloads","nationality"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,IAAMC,YAAY,GAAGN,GAAH,mBAAlB;;AAsBA,gBAAe,gBAAsB;AAAA,MAAnBO,YAAmB,QAAnBA,YAAmB;AACnC,MAAIC,aAAa,GAAGC,QAAQ,CAACF,YAAD,CAA5B;AAEA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,YAAd;AAA4B,IAAA,SAAS,EAAE;AAAEE,MAAAA,aAAa,EAAbA;AAAF,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,iBAA8B;AAAA,QAA3BE,OAA2B,SAA3BA,OAA2B;AAAA,QAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,QAAXC,IAAW,SAAXA,IAAW;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,MAAAA,IAAI,EAAJA;AAAF,KAAZ;AACA,QAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AAHkB,uBAmBzBC,IAAI,CAACG,MAnBoB;AAAA,QAM3BC,YAN2B,gBAM3BA,YAN2B;AAAA,QAO3BR,aAP2B,gBAO3BA,aAP2B;AAAA,QAQ3BS,WAR2B,gBAQ3BA,WAR2B;AAAA,QAS3BC,cAT2B,gBAS3BA,cAT2B;AAAA,QAU3BC,OAV2B,gBAU3BA,OAV2B;AAAA,2CAW3BC,MAX2B;AAAA,QAYzBC,SAZyB,uBAYzBA,SAZyB;AAAA,QAazBC,WAbyB,uBAazBA,WAbyB;AAAA,QAczBC,WAdyB,uBAczBA,WAdyB;AAAA,mEAezBC,YAfyB,CAgBvBC,QAhBuB;AAAA,QAgBVC,WAhBU,4BAgBVA,WAhBU;;AAoB7B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACkBlB,aADlB,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,oBAGiBQ,YAHjB,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,mBAKgBU,WALhB,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,cAOWJ,WAPX,CADF;AAWD,GAhCH,CADF,CADF;AAsCD,CAzCD","sourcesContent":["import gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n});\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      details\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n        second_stage {\n          payloads {\n            nationality\n          }\n        }\n      }\n    }\n  }\n`;\nexport default ({ flightNumber }) => {\n  let flight_number = parseInt(flightNumber);\n\n  return (\n    <ApolloProvider client={client}>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          console.log({ data });\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n\n          const {\n            mission_name,\n            flight_number,\n            launch_year,\n            launch_success,\n            details,\n            rocket: {\n              rocket_id,\n              rocket_name,\n              rocket_type,\n              second_stage: {\n                payloads: [{ nationality }],\n              },\n            },\n          } = data.launch;\n          return (\n            <div>\n              Flight Number: {flight_number}\n              <br />\n              Mission Name: {mission_name}\n              <br />\n              nationality: {nationality}\n              <br />\n              rocket: {rocket_name}\n            </div>\n          );\n        }}\n      </Query>\n    </ApolloProvider>\n  );\n};\n\nexport const getServerSideProps = async (req) => {\n  const res = req.params.flight_number;\n  return { props: { flightNumber: res } };\n};\n"]},"metadata":{},"sourceType":"module"}