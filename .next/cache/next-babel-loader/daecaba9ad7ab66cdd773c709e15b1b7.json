{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/past_launches.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query LaunchesQuery {\\n    launches {\\n      flight_number\\n      mission_name\\n      launch_year\\n      launch_date_local\\n      launch_success\\n      details\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Past_Launch from \"../components/past_launches/Past_Launch.js\";\nimport withApollo from \"../libs/withApollo\";\nvar client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\nvar LAUNCHES_QUERY = gql(_templateObject());\n\nvar Past_Launches = function Past_Launches() {\n  _s();\n\n  var _useQuery = useQuery(LAUNCHES_QUERY),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  if (loading || !data) {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }\n    }, \"loading...\");\n  }\n\n  return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }, data.title); // return (\n  // <ApolloProvider client={client}>\n  //   <div>\n  //     <Query query={LAUNCHES_QUERY}>\n  //       {({ loading, error, data }) => {\n  //         if (loading) return <h4>Loading...</h4>;\n  //         if (error) console.log(error);\n  //         console.log(data.launches.mission_name);\n  //         return (\n  //           <div>\n  //             <h2>Test</h2>\n  //             {data.launches.map((launch) => {\n  //               return (\n  //                 <Past_Launch key={launch.flight_number} launch={launch} />\n  //               );\n  //             })}\n  //           </div>\n  //         );\n  //       }}\n  //     </Query>\n  //   </div>\n  // </ApolloProvider>\n  // );\n};\n\n_s(Past_Launches, \"HasvTXHwlBNedvPpf4Gl00Z2xbw=\", true);\n\n_c = Past_Launches;\nexport var __N_SSP = true;\nexport default _c2 = withApollo(Past_Launches);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Past_Launches\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/past_launches.js"],"names":["React","Component","Fragment","gql","Query","ApolloClient","ApolloProvider","Past_Launch","withApollo","client","uri","LAUNCHES_QUERY","Past_Launches","useQuery","loading","data","title"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,WAAP,MAAwB,4CAAxB;AACA,OAAOC,UAAP,MAAqC,oBAArC;AAEA,IAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,IAAMC,cAAc,GAAGR,GAAH,mBAApB;;AAaA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAAA,kBACAC,QAAQ,CAACF,cAAD,CADR;AAAA,MAClBG,OADkB,aAClBA,OADkB;AAAA,MACTC,IADS,aACTA,IADS;;AAG1B,MAAID,OAAO,IAAI,CAACC,IAAhB,EAAsB;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACC,KAAV,CAAP,CAN0B,CAO1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAhCD;;GAAMJ,a;;KAAAA,a;;AAgDN,qBAAeJ,UAAU,CAACI,aAAD,CAAzB","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Past_Launch from \"../components/past_launches/Past_Launch.js\";\nimport withApollo, { clientFn } from \"../libs/withApollo\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n});\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      details\n    }\n  }\n`;\n\nconst Past_Launches = () => {\n  const { loading, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading || !data) {\n    return <h1>loading...</h1>;\n  }\n  return <h1>{data.title}</h1>;\n  // return (\n\n  // <ApolloProvider client={client}>\n  //   <div>\n  //     <Query query={LAUNCHES_QUERY}>\n  //       {({ loading, error, data }) => {\n  //         if (loading) return <h4>Loading...</h4>;\n  //         if (error) console.log(error);\n  //         console.log(data.launches.mission_name);\n  //         return (\n  //           <div>\n  //             <h2>Test</h2>\n\n  //             {data.launches.map((launch) => {\n  //               return (\n  //                 <Past_Launch key={launch.flight_number} launch={launch} />\n  //               );\n  //             })}\n  //           </div>\n  //         );\n  //       }}\n  //     </Query>\n  //   </div>\n  // </ApolloProvider>\n  // );\n};\n\nexport const getServerSideProps = async () => {\n  const apolloClient = clientFn();\n  // apolloClient.* https://www.apollographql.com/docs/react/api/apollo-client/#apolloclient-functions\n  // You do not use hooks like useQuery, useMutation in here\n  return {\n    props: {\n      apollo: apolloClient,\n      apolloState: {\n        data: apolloClient.cache.extract(),\n      },\n    },\n  };\n};\n\nexport default withApollo(Past_Launches);\n"]},"metadata":{},"sourceType":"module"}