{"ast":null,"code":"var _jsxFileName = \"/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/launches/[flight_number].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      details\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n        second_stage {\n          payloads {\n            nationality\n          }\n        }\n      }\n    }\n  }\n`;\nexport default (({\n  flightNumber\n}) => {\n  let flight_number = parseInt(flightNumber);\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Query, {\n    query: LAUNCH_QUERY,\n    variables: {\n      flight_number\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n    const {\n      mission_name,\n      flight_number,\n      launch_year,\n      launch_success,\n      details,\n      rocket: {\n        rocket_id,\n        rocket_name,\n        rocket_type,\n        second_stage: {\n          payloads: {\n            nationality\n          }\n        }\n      }\n    } = data.launch;\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, \"Flight Number: \", flight_number, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }), \"Mission Name: \", mission_name, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }), nationality);\n  }));\n});\nexport const getServerSideProps = async req => {\n  const res = req.params.flight_number;\n  return {\n    props: {\n      flightNumber: res\n    }\n  };\n};","map":{"version":3,"sources":["/Users/SteveRoe/Documents/Coding/letsgo/spacex/pages/launches/[flight_number].js"],"names":["gql","Query","ApolloClient","ApolloProvider","client","uri","LAUNCH_QUERY","flightNumber","flight_number","parseInt","loading","error","data","console","log","mission_name","launch_year","launch_success","details","rocket","rocket_id","rocket_name","rocket_type","second_stage","payloads","nationality","launch","getServerSideProps","req","res","params","props"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,MAAMC,YAAY,GAAGN,GAAI;;;;;;;;;;;;;;;;;;;;;CAAzB;AAsBA,gBAAe,CAAC;AAAEO,EAAAA;AAAF,CAAD,KAAsB;AACnC,MAAIC,aAAa,GAAGC,QAAQ,CAACF,YAAD,CAA5B;AAEA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,YAAd;AAA4B,IAAA,SAAS,EAAE;AAAEE,MAAAA;AAAF,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC7B,QAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEX,UAAM;AACJI,MAAAA,YADI;AAEJP,MAAAA,aAFI;AAGJQ,MAAAA,WAHI;AAIJC,MAAAA,cAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SADM;AAENC,QAAAA,WAFM;AAGNC,QAAAA,WAHM;AAINC,QAAAA,YAAY,EAAE;AACZC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA;AAAF;AADE;AAJR;AANJ,QAcFb,IAAI,CAACc,MAdT;AAeA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACkBlB,aADlB,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,oBAGiBO,YAHjB,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKGU,WALH,CADF;AASD,GA7BH,CADF,CADF;AAmCD,CAtCD;AAwCA,OAAO,MAAME,kBAAkB,GAAG,MAAOC,GAAP,IAAe;AAC/C,QAAMC,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAWtB,aAAvB;AACA,SAAO;AAAEuB,IAAAA,KAAK,EAAE;AAAExB,MAAAA,YAAY,EAAEsB;AAAhB;AAAT,GAAP;AACD,CAHM","sourcesContent":["import gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n});\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      details\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n        second_stage {\n          payloads {\n            nationality\n          }\n        }\n      }\n    }\n  }\n`;\nexport default ({ flightNumber }) => {\n  let flight_number = parseInt(flightNumber);\n\n  return (\n    <ApolloProvider client={client}>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n\n          const {\n            mission_name,\n            flight_number,\n            launch_year,\n            launch_success,\n            details,\n            rocket: {\n              rocket_id,\n              rocket_name,\n              rocket_type,\n              second_stage: {\n                payloads: { nationality },\n              },\n            },\n          } = data.launch;\n          return (\n            <div>\n              Flight Number: {flight_number}\n              <br />\n              Mission Name: {mission_name}\n              <br />\n              {nationality}\n            </div>\n          );\n        }}\n      </Query>\n    </ApolloProvider>\n  );\n};\n\nexport const getServerSideProps = async (req) => {\n  const res = req.params.flight_number;\n  return { props: { flightNumber: res } };\n};\n"]},"metadata":{},"sourceType":"module"}